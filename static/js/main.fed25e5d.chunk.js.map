{"version":3,"sources":["index.js"],"names":["Square","props","className","highlight","onClick","value","Board","i","this","squares","winSquares","includes","startingSlot","rowButtons","push","renderSquare","arrButtons","renderRow","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","AscMovelist","slice","length","calculateWinner","winner","setState","concat","currentMove","step","current","gameStatus","moves","map","move","col","row","desc","jumpTo","status","drawResult","reverse","id","handleClick","changSortOrder","lines","a","b","c","d","e","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fed25e5d.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst game_size = 5;\r\nfunction Square(props) {\r\n    const className = props.highlight ? 'square highlight' : 'square';\r\n    return (\r\n        <button className={className}\r\n                onClick={props.onClick}>{props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n                // Highlight if the square's current pos \"i\" is in the winSquares returned from Games\r\n                highlight={this.props.winSquares && this.props.winSquares.includes(i)}\r\n            />\r\n        );\r\n    }\r\n    renderRow(startingSlot){\r\n        let rowButtons = [];\r\n        for(let i = 0; i < game_size; ++i){\r\n            rowButtons.push(this.renderSquare(startingSlot + i));\r\n        }\r\n        return (\r\n            <div className=\"board-row\">\r\n                {rowButtons}\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        let arrButtons = [];\r\n        for(let i = 0; i < game_size**2; i += game_size){\r\n            arrButtons.push(this.renderRow(i));\r\n        }\r\n        return (\r\n            /*\r\n            //Hardcode version\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(5)}\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                    {this.renderSquare(9)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(10)}\r\n                    {this.renderSquare(11)}\r\n                    {this.renderSquare(12)}\r\n                    {this.renderSquare(13)}\r\n                    {this.renderSquare(14)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(15)}\r\n                    {this.renderSquare(16)}\r\n                    {this.renderSquare(17)}\r\n                    {this.renderSquare(18)}\r\n                    {this.renderSquare(19)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(20)}\r\n                    {this.renderSquare(21)}\r\n                    {this.renderSquare(22)}\r\n                    {this.renderSquare(23)}\r\n                    {this.renderSquare(24)}\r\n                </div>\r\n            </div>\r\n            */\r\n            <div>\r\n                {arrButtons}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [\r\n                {\r\n                    squares: Array(game_size**2).fill(null)\r\n                }\r\n            ],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            AscMovelist: true\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares).winner || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState({\r\n            history: history.concat([\r\n                {\r\n                    squares: squares,\r\n                    currentMove: i\r\n                }\r\n            ]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0\r\n        });\r\n    }\r\n    /*\r\n    findLatestMove(oldHistory, newHistory){\r\n        console.log(1);\r\n        for (let i = 0; i < newHistory.length; i++) {\r\n            if (newHistory[i] && newHistory[i] !== oldHistory[i])\r\n                return i;\r\n        }\r\n        return -1;\r\n    }\r\n    */\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const gameStatus = calculateWinner(current.squares);\r\n        const winner = gameStatus.winner;\r\n\r\n        let moves = history.map((step, move) => {\r\n            const col = step.currentMove % game_size,\r\n                row = ~~(step.currentMove / game_size),\r\n                desc = move ?\r\n                'Go to move #' + move +' [col: ' + col + ' - row: ' + row + ']' :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button\r\n                        className={move === this.state.stepNumber ? 'currently-selected-move-list' : ''}\r\n                        onClick={() => this.jumpTo(move)}>{desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let status = winner ?\r\n            \"Winner: \" + winner:\r\n            gameStatus.drawResult ?\r\n                \"Draw!!\":\r\n                \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n\r\n\r\n        // reverse movelist due to state setting\r\n        if(!this.state.AscMovelist)\r\n            moves.reverse();\r\n        return (\r\n            <div className=\"game\">\r\n                <div id=\"author\">\r\n                    <h1>Tictactoe assignment 01</h1>\r\n                    <p>by Phan Tan Dat - 18127078</p>\r\n                </div>\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={i => this.handleClick(i)}\r\n                        winSquares={(gameStatus.winSquares)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button\r\n                        onClick={() => this.changSortOrder()}>\r\n                        {this.state.AscMovelist ? 'Descending' : 'Ascending'}\r\n                    </button>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changSortOrder() {\r\n        this.setState(\r\n            {AscMovelist: !this.state.AscMovelist}\r\n        );\r\n    }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2, 3, 4],\r\n        [5, 6, 7, 8, 9],\r\n        [10, 11, 12, 13, 14],\r\n        [15, 16, 17, 18, 19],\r\n        [20, 21, 22, 23, 24],\r\n\r\n        [0, 5, 10, 15, 20],\r\n        [1, 6, 11, 16, 21],\r\n        [2, 7, 12, 17, 22],\r\n        [3, 8, 13, 18, 23],\r\n        [4, 9, 14, 19, 24],\r\n\r\n        [0, 6, 12, 18, 24],\r\n        [4, 8, 12, 16, 20]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c, d, e] = lines[i];\r\n        if (squares[a]\r\n            && squares[a] === squares[b]\r\n            && squares[a] === squares[c]\r\n            && squares[a] === squares[d]\r\n            && squares[a] === squares[e]) {\r\n            return {\r\n                winner: squares[a],\r\n                drawResult: false,\r\n                winSquares: lines[i]\r\n            };\r\n        }\r\n    }\r\n    // Loop through all squares to check if there any possible move. If not -> Draw game\r\n    for(let i = 0; i < squares.length; i++)\r\n        if(squares[i] === null)\r\n            return {\r\n                winner: null,\r\n                drawResult: false,\r\n                winSquares: null\r\n            };\r\n\r\n    return {\r\n        winner: null,\r\n        drawResult: true,\r\n        winSquares: null\r\n    };\r\n}\r\n"],"sourceRoot":""}